openapi: "3.0.0"
info:
  version: 2.0.0
  title: Blog prototype for test migrations. Modify columns, remove log_records table, added tags, post_tag tables
  license:
    name: MIT
servers:
  - url: http://blog.dummy.io/v2
paths:
  /posts:
    get:
      summary: List all posts
      operationId: listPosts
      tags:
        - posts
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of posts
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Posts"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /posts/{id}:
    parameters:
      -   name: id
          in: path
          required: true
          description: The id of the post to retrieve
          schema:
            type: integer
    get:
      summary: Info for a specific post
      operationId: showPostById
      tags:
        - posts
      responses:
        '200':
          $ref: "#/components/responses/Post"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /posts/{id}/relationships/category:
    parameters:
      - name: id
        in: path
        required: true
        description: The id of the post to retrieve
        schema:
          type: integer
          additionalProperties:
            $ref: "#/components/schemas/Post"
    get:
      summary: Category for a specific post
      operationId: showPostCategory
      tags:
        - categories
      responses:
        '200':
           $ref: "#/components/responses/Category"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /posts/{id}/relationships/comments:
    parameters:
      - name: id
        in: path
        required: true
        description: The id of the post to retrieve
        schema:
          type: integer
          additionalProperties:
            $ref: "#/components/schemas/Post"
    get:
      summary: Category for a specific post
      operationId: showPostComments
      tags:
        - comments
      responses:
        '200':
          $ref: "#/components/responses/Comments"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /posts/{postId}/comments:
    parameters:
      -   name: postId
          in: path
          required: true
          description: The id of the post to retrieve
          schema:
            type: integer
            additionalProperties:
              $ref: "#/components/schemas/Post"
    get:
      summary: Info for a specific post
      operationId: showPostComments
      tags:
        - comments
      responses:
        '200':
          $ref: "#/components/responses/Comments"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a comment for post
      operationId: createPostComment
      tags:
        - comments
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /category/{categoryId}/posts/{id}:
    parameters:
      - name: categoryId
        in: path
        required: true
        description: The slug of the post to retrieve
        schema:
          type: integer
          additionalProperties:
              $ref: "#/components/schemas/Category"
      - name: id
        in: path
        required: true
        description: The id of the comment to retrieve
        schema:
          type: integer
          additionalProperties:
             $ref: "#/components/schemas/Post"
    get:
       summary: Show post from concrete category
       operationId: showPostFromCategory
       tags:
         - posts
       responses:
         '200':
           description: Expected response to a valid request
           content:
             application/json:
               schema:
                 $ref: "#/components/schemas/Post"
         default:
           description: unexpected error
           content:
             application/json:
               schema:
                 $ref: "#/components/schemas/Error"
  /posts/{slug}/comment/{id}:
    parameters:
      -   name: slug
          in: path
          required: true
          description: The slug of the post to retrieve
          schema:
            type: string
            additionalProperties:
              $ref: "#/components/schemas/Post"
      -   name: id
          in: path
          required: true
          description: The id of the comment to retrieve
          schema:
            type: integer
    get:
      summary: Info for a specific comment
      operationId: showPostComment
      tags:
        - comments
      responses:
        '200':
          $ref: "#/components/responses/Comment"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: update a specific pet
      operationId: updatePostCommentById
      tags:
        - comments
      responses:
        '200':
          description: The updated comment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
    delete:
      summary: delete a specific comment
      operationId: deletePostCommentById
      tags:
        - comments
      responses:
        '204':
          description: successfully deleted comment
components:
  schemas:
    User:
      description: The User
      x-table: v2_users
      x-indexes:
        - unique:login
        - unique:email
        - hash:role,flags
      required:
        - id
        - login
        - email
        - password
      properties:
        id:
          type: integer
          format: int64
          readOnly: True
        login:
          type: string
        email:
          type: string
          x-db-type: varchar
          maxLength: 255
        password:
          type: string
          format: password
        role:
          type: string
          enum:
            - admin
            - editor
            - reader
          x-faker: "$faker->randomElement(['admin', 'editor', 'reader'])"
        flags:
          type: integer
          default: 0
        created_at:
          type: string
          format: date-time
    Users:
      type: array
      items:
        $ref: "#/components/schemas/User"
    Category:
      x-table: v2_categories
      x-indexes:
        - title
      description: Category of posts
      required:
        - id
        - title
        - cover
        - active
      properties:
        id:
          type: integer
          format: int64
          readOnly: True
        title:
          type: string
          maxLength: 100
        cover:
          type: string
        active:
          type: boolean
        posts:
          type: array
          items:
            $ref: "#/components/schemas/Post"
    Categories:
      type: array
      items:
        $ref: "#/components/schemas/Category"
    Post:
      x-table: v2_posts
      x-indexes:
        - unique:title
      description: A blog post (uid used as pk for test purposes)
      required:
        - id
        - title
        - category
        - author
        - active
      properties:
        id:
          type: integer
          format: int64
          readOnly: True
        title:
          type: string
          x-db-type: VARCHAR
          maxLength: 255
        slug:
          type: string
          minLength: 1
          maxLength: 200
        lang:
          type: string
          enum:
            - ru
            - eng
          default: ru
        category:
          $ref: "#/components/schemas/Category"
        active:
          type: boolean
        created_at:
          type: string
          format: date
        created_by:
          $ref: "#/components/schemas/User"
        comments:
          type: array
          #          x-no-relation: true
          items:
            $ref: "#/components/schemas/Comment"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
    Posts:
      type: array
      items:
        $ref: "#/components/schemas/Post"
    Comment:
      x-table: v2_comments
      required:
        - id
        - post
        - message
        - created_at
      properties:
        id:
          type: integer
          format: int64
          readOnly: True
        post:
          $ref: "#/components/schemas/Post"
        user:
          $ref: "#/components/schemas/User"
        message:
          type: string
        meta_data:
          type: string
          example: "type=='ticket' && status=='closed'"
          minLength: 1
          maxLength: 300
          default: ''
        created_at:
          type: string
          format: date-time
    Comments:
      type: array
      items:
        $ref: "#/components/schemas/Comment"
    Tag:
      x-table: v2_tags
      x-indexes:
        - unique:name
      required:
        - id
        - name
        - lang
      properties:
        id:
          type: integer
          format: int64
          readOnly: True
        name:
          type: string
          x-db-type: VARCHAR
          maxLength: 100
        lang:
          type: string
          enum:
            - ru
            - eng
        posts:
          type: array
          items:
            $ref: "#/components/schemas/Post"
    Tags:
      type: array
      items:
        $ref: "#/components/schemas/Tag"
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  responses:
    Post:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              post:
                $ref: "#/components/schemas/Post"
    Category:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              category:
                $ref: "#/components/schemas/Category"
    Comment:
      description: Expected response to a valid request
      content:
        application/vnd.api+json:
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                    id:
                      type: integer
                      example: 1
                    type:
                      type: string
                      enum:
                        - "comment"
                    attributes:
                      $ref: "#/components/schemas/Comment"
                    relationships:
                      type: object
                      properties:
                        author:
                          type: object
              links:
                type: object
                additionalProperties:
                  oneOf:
                      - type: string
                      - type: object
                        properties:
                          href:
                            type: string
                          meta:
                            type: object
    Comments:
      description: Expected response to a valid request
      content:
        application/vnd.api+json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Comment"

